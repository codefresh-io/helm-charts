# yaml-language-server: $schema=https://raw.githubusercontent.com/quintush/helm-unittest/master/schema/helm-testsuite.json
suite: deployment spec
templates:
  - templates/controller.yaml
values:
  - values.yaml
tests:
  - it: Test deployment matchLabels
    asserts:
      - isNotEmpty:
          path: spec.selector.matchLabels
      - equal:
          path: spec.selector.matchLabels
          value:
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/name: cf-common-test

  - it: Test deployment strategy
    asserts:
      - equal:
          path: spec.strategy.type
          value: RollingUpdate

  - it: Test deployment replica number (no HPA)
    set:
      hpa:
        enabled: false
    asserts:
      - equal:
          path: spec.replicas
          value: 2

  - it: Test deployment revisionHistoryLimit
    asserts:
      - equal:
          path: spec.revisionHistoryLimit
          value: 5

  - it: Test deployment automount SA token
    asserts:
      - equal:
          path: spec.template.spec.automountServiceAccountToken
          value: true

  - it: Test deployment imagePullSecrets
    asserts:
      - lengthEqual:
          path: spec.template.spec.imagePullSecrets
          count: 2

  - it: Test deployment TPL imagePullSecrets
    release:
      name: cf
    values:
      - values.yaml
    set:
      global:
        pullSecretName: ecr-codefresh
      imagePullSecrets:
        - "{{ .Release.Name }}-{{ .Values.global.pullSecretName }}-registry"
    asserts:
      - contains:
          path: spec.template.spec.imagePullSecrets
          content:
            name: cf-ecr-codefresh-registry

  - it: Test deploymeny with global imagePullSecrets
    release:
      name: cf
    values:
      - values.yaml
    set:
      global:
        imagePullSecrets:
          - name: test-global-pull-secret
    asserts:
      - contains:
          path: spec.template.spec.imagePullSecrets
          content:
            name: test-global-pull-secret

  - it: Test deployment's initContainer is present and valid
    values:
      - values.yaml
    set:
      initContainers:
        sleep:
          enabled: true
          image:
            registry: docker.io
            repository: bitnami/bitnami-shell
            tag: latest
            pullPolicy: IfNotPresent
          command: ['sh', '-c', "sleep 60"]
    asserts:
      - lengthEqual:
          path: spec.template.spec.initContainers
          count: 1
      - contains:
          path: spec.template.spec.initContainers
          content:
            name: sleep
            image: docker.io/bitnami/bitnami-shell:latest
            command: ['sh', '-c', "sleep 60"]
            imagePullPolicy: IfNotPresent
            volumeMounts: null

  - it: Test deployment's initContainer is disabled
    values:
      - values.yaml
    set:
      initContainers:
        sleep:
          enabled: false
          image:
            registry: docker.io
            repository: bitnami/bitnami-shell
            tag: latest
            pullPolicy: IfNotPresent
          command: ['sh', '-c', "sleep 60"]
    asserts:
      - isNull:
          path: spec.template.spec.initContainers

  - it: Test deployment's initContainer with global.imageRegistry
    values:
      - values.yaml
    set:
      global:
        imageRegistry: myregistry.io
      initContainers:
        sleep:
          enabled: true
          image:
            registry: docker.io
            repository: bitnami/bitnami-shell
            tag: latest
            pullPolicy: IfNotPresent
          command: ['sh', '-c', "sleep 60"]
    asserts:
      - lengthEqual:
          path: spec.template.spec.initContainers
          count: 1
      - contains:
          path: spec.template.spec.initContainers
          content:
            name: sleep
            image: myregistry.io/bitnami/bitnami-shell:latest
            command: ['sh', '-c', "sleep 60"]
            imagePullPolicy: IfNotPresent
            volumeMounts: null

  - it: Test deployments nodeSelector
    values:
      - values.yaml
    set:
      nodeSelector:
        node-type: app
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector
          value:
            node-type: app

  - it: Test global nodeSelector
    values:
      - values.yaml
    set:
      global:
        nodeSelector:
          alice: bob
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector
          value:
            alice: bob

  - it: Test deployment nodeSelector with global nodeSelector
    values:
      - values.yaml
    set:
      global:
        nodeSelector:
          alice: bob
      nodeSelector:
        alice: bar
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector
          value:
            alice: bar

  - it: Test deployments tolerations
    values:
      - values.yaml
    set:
      tolerations:
        - effect: NoSchedule
          key: codefresh.io
          value: app
    asserts:
      - contains:
          path: spec.template.spec.tolerations
          content:
            effect: NoSchedule
            key: codefresh.io
            value: app

  - it: Test global tolerations
    values:
      - values.yaml
    set:
      global:
        tolerations:
          - effect: NoSchedule
            key: codefresh.io
            value: app
    asserts:
      - contains:
          path: spec.template.spec.tolerations
          content:
            effect: NoSchedule
            key: codefresh.io
            value: app

  - it: Test deployment tolerations with global tolerations
    values:
      - values.yaml
    set:
      global:
        tolerations:
          - effect: NoSchedule
            key: worker
            value: true
      tolerations:
        - effect: NoSchedule
          key: codefresh.io
          value: app
    asserts:
      - contains:
          path: spec.template.spec.tolerations
          content:
            effect: NoSchedule
            key: codefresh.io
            value: app

  - it: Test deployments affinity
    values:
      - values.yaml
    set:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-type
                    operator: In
                    values:
                      - app
    asserts:
      - equal:
          path: spec.template.spec.affinity
          value:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: node-type
                        operator: In
                        values:
                          - app

  - it: Test global affinity
    values:
      - values.yaml
    set:
      global:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node-type
                      operator: In
                      values:
                        - app
    asserts:
      - equal:
          path: spec.template.spec.affinity
          value:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: node-type
                        operator: In
                        values:
                          - app

  - it: Test deployment affinity with global affinity
    values:
      - values.yaml
    set:
      global:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node-type
                      operator: In
                      values:
                        - app
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: security
                    operator: In
                    values:
                      - S1
              topologyKey: failure-domain.beta.kubernetes.io/zone
    asserts:
      - equal:
          path: spec.template.spec.affinity
          value:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: security
                        operator: In
                        values:
                          - S1
                  topologyKey: failure-domain.beta.kubernetes.io/zone

  - it: Test deployment with sidecar container
    values:
      - values.yaml
    set:
      additionalContainers:
        - name: sidecar-container
          image: busybox
          command: ["/bin/sh"]
          args: ["-c", "while true; do echo echo $(date -u) 'Hi I am from Sidecar container' >> /var/log/index.html; sleep 5;done"]
          resources: {}
          volumeMounts:
          - name: var-logs
            mountPath: /var/log
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers
          count: 2
      - contains:
          path: spec.template.spec.containers
          content:
            name: sidecar-container
            image: busybox
            command: ["/bin/sh"]
            args: ["-c", "while true; do echo echo $(date -u) 'Hi I am from Sidecar container' >> /var/log/index.html; sleep 5;done"]
            resources: {}
            volumeMounts:
            - name: var-logs
              mountPath: /var/log

  - it: Test pod security context
    values:
      - values.yaml
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 0

  - it: Test disabled pod security context
    values:
      - values.yaml
    set:
      podSecurityContext:
        enabled: false
    asserts:
      - isNull:
          path: spec.template.spec.securityContext

  - it: Test pod security context (omit enabled)
    values:
      - values.yaml
    set:
      podSecurityContext:
        enabled: true
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 0
